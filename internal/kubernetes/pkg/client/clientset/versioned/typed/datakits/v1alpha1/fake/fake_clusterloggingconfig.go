// Unless explicitly stated otherwise all files in this repository are licensed
// under the MIT License.
// This product includes software developed at Guance Cloud (https://www.guance.com/).
// Copyright 2021-present Guance, Inc.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "gitlab.jiagouyun.com/cloudcare-tools/datakit/internal/kubernetes/pkg/apis/datakits/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterLoggingConfigs implements ClusterLoggingConfigInterface
type FakeClusterLoggingConfigs struct {
	Fake *FakeLoggingV1alpha1
}

var clusterloggingconfigsResource = schema.GroupVersionResource{Group: "logging.datakits.io", Version: "v1alpha1", Resource: "clusterloggingconfigs"}

var clusterloggingconfigsKind = schema.GroupVersionKind{Group: "logging.datakits.io", Version: "v1alpha1", Kind: "ClusterLoggingConfig"}

// Get takes name of the clusterLoggingConfig, and returns the corresponding clusterLoggingConfig object, and an error if there is any.
func (c *FakeClusterLoggingConfigs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ClusterLoggingConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusterloggingconfigsResource, name), &v1alpha1.ClusterLoggingConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLoggingConfig), err
}

// List takes label and field selectors, and returns the list of ClusterLoggingConfigs that match those selectors.
func (c *FakeClusterLoggingConfigs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ClusterLoggingConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusterloggingconfigsResource, clusterloggingconfigsKind, opts), &v1alpha1.ClusterLoggingConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ClusterLoggingConfigList{ListMeta: obj.(*v1alpha1.ClusterLoggingConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.ClusterLoggingConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterLoggingConfigs.
func (c *FakeClusterLoggingConfigs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clusterloggingconfigsResource, opts))
}

// Create takes the representation of a clusterLoggingConfig and creates it.  Returns the server's representation of the clusterLoggingConfig, and an error, if there is any.
func (c *FakeClusterLoggingConfigs) Create(ctx context.Context, clusterLoggingConfig *v1alpha1.ClusterLoggingConfig, opts v1.CreateOptions) (result *v1alpha1.ClusterLoggingConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clusterloggingconfigsResource, clusterLoggingConfig), &v1alpha1.ClusterLoggingConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLoggingConfig), err
}

// Update takes the representation of a clusterLoggingConfig and updates it. Returns the server's representation of the clusterLoggingConfig, and an error, if there is any.
func (c *FakeClusterLoggingConfigs) Update(ctx context.Context, clusterLoggingConfig *v1alpha1.ClusterLoggingConfig, opts v1.UpdateOptions) (result *v1alpha1.ClusterLoggingConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clusterloggingconfigsResource, clusterLoggingConfig), &v1alpha1.ClusterLoggingConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLoggingConfig), err
}

// Delete takes name of the clusterLoggingConfig and deletes it. Returns an error if one occurs.
func (c *FakeClusterLoggingConfigs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(clusterloggingconfigsResource, name, opts), &v1alpha1.ClusterLoggingConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterLoggingConfigs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clusterloggingconfigsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterLoggingConfigList{})
	return err
}

// Patch applies the patch and returns the patched clusterLoggingConfig.
func (c *FakeClusterLoggingConfigs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ClusterLoggingConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clusterloggingconfigsResource, name, pt, data, subresources...), &v1alpha1.ClusterLoggingConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLoggingConfig), err
}
