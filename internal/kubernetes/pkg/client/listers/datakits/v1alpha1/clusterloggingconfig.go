// Unless explicitly stated otherwise all files in this repository are licensed
// under the MIT License.
// This product includes software developed at Guance Cloud (https://www.guance.com/).
// Copyright 2021-present Guance, Inc.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "gitlab.jiagouyun.com/cloudcare-tools/datakit/internal/kubernetes/pkg/apis/datakits/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterLoggingConfigLister helps list ClusterLoggingConfigs.
// All objects returned here must be treated as read-only.
type ClusterLoggingConfigLister interface {
	// List lists all ClusterLoggingConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterLoggingConfig, err error)
	// Get retrieves the ClusterLoggingConfig from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterLoggingConfig, error)
	ClusterLoggingConfigListerExpansion
}

// clusterLoggingConfigLister implements the ClusterLoggingConfigLister interface.
type clusterLoggingConfigLister struct {
	indexer cache.Indexer
}

// NewClusterLoggingConfigLister returns a new ClusterLoggingConfigLister.
func NewClusterLoggingConfigLister(indexer cache.Indexer) ClusterLoggingConfigLister {
	return &clusterLoggingConfigLister{indexer: indexer}
}

// List lists all ClusterLoggingConfigs in the indexer.
func (s *clusterLoggingConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterLoggingConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterLoggingConfig))
	})
	return ret, err
}

// Get retrieves the ClusterLoggingConfig from the index for a given name.
func (s *clusterLoggingConfigLister) Get(name string) (*v1alpha1.ClusterLoggingConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterloggingconfig"), name)
	}
	return obj.(*v1alpha1.ClusterLoggingConfig), nil
}
