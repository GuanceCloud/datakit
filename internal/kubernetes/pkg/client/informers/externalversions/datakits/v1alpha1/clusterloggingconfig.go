// Unless explicitly stated otherwise all files in this repository are licensed
// under the MIT License.
// This product includes software developed at Guance Cloud (https://www.guance.com/).
// Copyright 2021-present Guance, Inc.

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	datakitsv1alpha1 "gitlab.jiagouyun.com/cloudcare-tools/datakit/internal/kubernetes/pkg/apis/datakits/v1alpha1"
	versioned "gitlab.jiagouyun.com/cloudcare-tools/datakit/internal/kubernetes/pkg/client/clientset/versioned"
	internalinterfaces "gitlab.jiagouyun.com/cloudcare-tools/datakit/internal/kubernetes/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "gitlab.jiagouyun.com/cloudcare-tools/datakit/internal/kubernetes/pkg/client/listers/datakits/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ClusterLoggingConfigInformer provides access to a shared informer and lister for
// ClusterLoggingConfigs.
type ClusterLoggingConfigInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ClusterLoggingConfigLister
}

type clusterLoggingConfigInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterLoggingConfigInformer constructs a new informer for ClusterLoggingConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterLoggingConfigInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterLoggingConfigInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterLoggingConfigInformer constructs a new informer for ClusterLoggingConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterLoggingConfigInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.LoggingV1alpha1().ClusterLoggingConfigs().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.LoggingV1alpha1().ClusterLoggingConfigs().Watch(context.TODO(), options)
			},
		},
		&datakitsv1alpha1.ClusterLoggingConfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterLoggingConfigInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterLoggingConfigInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *clusterLoggingConfigInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&datakitsv1alpha1.ClusterLoggingConfig{}, f.defaultInformer)
}

func (f *clusterLoggingConfigInformer) Lister() v1alpha1.ClusterLoggingConfigLister {
	return v1alpha1.NewClusterLoggingConfigLister(f.Informer().GetIndexer())
}
