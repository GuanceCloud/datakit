// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	ifitem *ast.IfStmtElem
	iflist []*ast.IfStmtElem
	node   *ast.Node
	nodes  []*ast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const operatorsStart = 57378
const ADD = 57379
const DIV = 57380
const GTE = 57381
const GT = 57382
const NOT = 57383
const LT = 57384
const LTE = 57385
const MOD = 57386
const MUL = 57387
const NEQ = 57388
const EQ = 57389
const EQEQ = 57390
const SUB = 57391
const ADD_EQ = 57392
const SUB_EQ = 57393
const DIV_EQ = 57394
const MUL_EQ = 57395
const MOD_EQ = 57396
const operatorsEnd = 57397
const keywordsStart = 57398
const TRUE = 57399
const FALSE = 57400
const IDENTIFIER = 57401
const AND = 57402
const OR = 57403
const NIL = 57404
const NULL = 57405
const IF = 57406
const ELIF = 57407
const ELSE = 57408
const keywordsEnd = 57409
const startSymbolsStart = 57410
const START_STMTS = 57411
const startSymbolsEnd = 57412
const UMINUS = 57413

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"NOT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:764

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 23,
	5, 43,
	47, 43,
	-2, 38,
	-1, 26,
	13, 110,
	-2, 26,
	-1, 27,
	13, 111,
	-2, 27,
	-1, 30,
	13, 113,
	-2, 30,
	-1, 34,
	13, 112,
	-2, 34,
	-1, 75,
	5, 43,
	47, 43,
	-2, 63,
	-1, 178,
	1, 71,
	4, 71,
	8, 71,
	15, 71,
	28, 71,
	-2, 146,
	-1, 247,
	5, 43,
	47, 43,
	-2, 38,
}

const yyPrivate = 57344

const yyLast = 2080

var yyAct = [...]int16{
	75, 35, 37, 23, 206, 64, 3, 23, 23, 24,
	71, 69, 91, 94, 96, 82, 9, 62, 120, 95,
	93, 94, 17, 231, 92, 65, 73, 95, 93, 91,
	94, 83, 84, 68, 87, 88, 95, 93, 89, 104,
	90, 92, 121, 76, 263, 82, 9, 253, 249, 66,
	49, 238, 113, 114, 115, 250, 97, 67, 237, 91,
	94, 83, 84, 242, 87, 88, 95, 93, 89, 119,
	90, 92, 125, 2, 57, 128, 111, 58, 39, 50,
	47, 60, 86, 85, 279, 164, 42, 59, 43, 36,
	124, 202, 103, 99, 117, 106, 278, 101, 102, 9,
	151, 152, 154, 155, 51, 158, 159, 105, 53, 163,
	72, 100, 116, 166, 4, 98, 52, 99, 107, 170,
	123, 103, 96, 123, 40, 41, 101, 102, 173, 44,
	45, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 201, 76, 127, 203, 123, 176, 207, 209, 208,
	200, 232, 212, 8, 109, 10, 214, 6, 216, 218,
	57, 63, 23, 58, 1, 16, 123, 122, 26, 46,
	178, 27, 57, 59, 48, 58, 39, 50, 47, 60,
	28, 56, 272, 34, 42, 59, 43, 76, 76, 33,
	220, 222, 224, 5, 271, 29, 55, 61, 54, 32,
	31, 30, 51, 11, 15, 14, 53, 13, 12, 204,
	19, 70, 25, 7, 52, 178, 178, 123, 247, 248,
	233, 0, 40, 41, 0, 0, 255, 44, 45, 0,
	260, 0, 264, 0, 76, 0, 0, 0, 243, 0,
	126, 0, 267, 269, 208, 270, 268, 0, 0, 276,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 123, 0, 123, 287, 0, 108, 110,
	0, 112, 160, 293, 0, 0, 296, 298, 0, 0,
	0, 118, 302, 304, 123, 0, 307, 0, 0, 0,
	0, 0, 311, 172, 0, 0, 0, 177, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 0,
	153, 0, 156, 157, 0, 0, 0, 161, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 167, 168, 0,
	0, 0, 223, 225, 226, 171, 0, 0, 18, 0,
	0, 57, 0, 0, 58, 39, 50, 47, 60, 169,
	0, 0, 0, 42, 59, 43, 20, 0, 0, 22,
	21, 91, 94, 83, 84, 0, 87, 88, 95, 93,
	89, 51, 90, 92, 0, 53, 0, 215, 0, 244,
	245, 0, 246, 52, 0, 0, 0, 0, 0, 0,
	227, 40, 41, 0, 0, 0, 44, 45, 38, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 230, 0, 18, 0, 0,
	57, 235, 0, 58, 39, 50, 47, 60, 239, 240,
	241, 0, 42, 59, 43, 20, 0, 0, 22, 21,
	0, 62, 251, 252, 0, 254, 0, 258, 0, 259,
	51, 0, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 275, 0, 0,
	40, 41, 282, 0, 0, 44, 45, 38, 0, 0,
	0, 0, 285, 0, 286, 0, 0, 0, 0, 291,
	0, 292, 0, 0, 295, 18, 0, 0, 57, 0,
	301, 58, 39, 50, 47, 60, 0, 0, 0, 0,
	42, 59, 43, 20, 0, 0, 22, 21, 0, 9,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 40, 41,
	0, 0, 0, 44, 45, 38, 57, 0, 0, 58,
	39, 50, 47, 60, 0, 0, 0, 0, 42, 59,
	43, 20, 0, 0, 22, 21, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 82, 0, 0, 0, 40, 41, 219, 0,
	0, 44, 45, 38, 0, 0, 91, 94, 83, 84,
	0, 87, 88, 95, 93, 89, 0, 90, 92, 77,
	78, 80, 79, 81, 0, 0, 0, 0, 57, 86,
	85, 58, 39, 50, 47, 60, 0, 0, 262, 0,
	42, 59, 43, 0, 0, 0, 0, 0, 0, 0,
	261, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 40, 41,
	0, 0, 57, 44, 45, 58, 39, 50, 47, 60,
	0, 0, 257, 0, 42, 59, 43, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 57, 53, 0, 58, 39,
	50, 47, 60, 0, 52, 312, 0, 42, 59, 43,
	0, 0, 40, 41, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 57, 53,
	0, 58, 39, 50, 47, 60, 0, 52, 308, 0,
	42, 59, 43, 0, 0, 40, 41, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 57, 53, 0, 58, 39, 50, 47, 60, 0,
	52, 305, 0, 42, 59, 43, 0, 0, 40, 41,
	0, 0, 0, 44, 45, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 57, 53, 0, 58, 39, 50,
	47, 60, 0, 52, 303, 0, 42, 59, 43, 0,
	0, 40, 41, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 57, 53, 0,
	58, 39, 50, 47, 60, 0, 52, 299, 0, 42,
	59, 43, 0, 0, 40, 41, 0, 0, 0, 44,
	45, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	57, 53, 0, 58, 39, 50, 47, 60, 0, 52,
	297, 0, 42, 59, 43, 0, 0, 40, 41, 0,
	0, 0, 44, 45, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 57, 53, 0, 58, 39, 50, 47,
	60, 0, 52, 294, 0, 42, 59, 43, 0, 0,
	40, 41, 0, 0, 0, 44, 45, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 57, 53, 0, 58,
	39, 50, 47, 60, 0, 52, 288, 0, 42, 59,
	43, 0, 0, 40, 41, 0, 0, 0, 44, 45,
	0, 0, 0, 0, 0, 0, 51, 0, 57, 0,
	53, 58, 39, 50, 47, 60, 0, 266, 52, 0,
	42, 59, 43, 0, 0, 0, 40, 41, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 0, 51, 0,
	57, 0, 53, 58, 39, 50, 47, 60, 0, 0,
	52, 0, 42, 59, 43, 0, 0, 0, 40, 41,
	0, 0, 217, 44, 45, 0, 0, 0, 0, 0,
	51, 0, 57, 0, 53, 58, 39, 50, 47, 60,
	213, 0, 52, 0, 42, 59, 43, 0, 0, 0,
	40, 41, 0, 0, 0, 44, 45, 0, 0, 0,
	0, 0, 51, 0, 0, 57, 53, 0, 58, 39,
	50, 47, 60, 0, 52, 211, 0, 42, 59, 43,
	0, 0, 40, 41, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 0, 0, 51, 0, 57, 0, 53,
	58, 39, 50, 47, 60, 0, 0, 52, 0, 42,
	59, 43, 0, 0, 0, 40, 41, 0, 0, 210,
	44, 45, 0, 0, 0, 0, 0, 51, 0, 57,
	0, 53, 58, 39, 50, 47, 60, 0, 205, 52,
	0, 42, 59, 43, 0, 0, 0, 40, 41, 0,
	0, 0, 44, 45, 0, 0, 0, 0, 174, 51,
	0, 57, 0, 53, 58, 39, 50, 47, 60, 0,
	0, 52, 0, 42, 59, 43, 0, 0, 0, 40,
	41, 0, 0, 0, 44, 45, 0, 0, 0, 0,
	0, 51, 0, 57, 0, 53, 58, 39, 50, 47,
	60, 169, 0, 52, 0, 42, 59, 43, 0, 0,
	0, 40, 41, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 0, 51, 0, 0, 57, 53, 0, 58,
	39, 50, 47, 60, 0, 52, 162, 0, 42, 59,
	43, 0, 0, 40, 41, 0, 0, 0, 44, 45,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 52, 82,
	0, 0, 0, 0, 0, 0, 40, 41, 0, 0,
	0, 44, 45, 91, 94, 83, 84, 0, 87, 88,
	95, 93, 89, 0, 90, 92, 77, 78, 80, 79,
	81, 0, 129, 0, 0, 57, 86, 85, 58, 39,
	50, 47, 60, 0, 0, 0, 0, 42, 59, 43,
	0, 74, 0, 0, 57, 0, 0, 58, 39, 50,
	47, 60, 0, 0, 0, 51, 42, 59, 43, 53,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 51, 40, 41, 0, 53, 0,
	44, 45, 0, 0, 57, 0, 52, 58, 39, 50,
	47, 60, 0, 0, 40, 41, 42, 59, 43, 44,
	45, 0, 0, 57, 0, 0, 58, 39, 50, 47,
	179, 0, 0, 0, 51, 42, 59, 43, 53, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 0, 0, 51, 40, 41, 0, 53, 0, 44,
	45, 0, 0, 290, 0, 52, 0, 0, 0, 82,
	0, 0, 0, 40, 41, 289, 0, 0, 44, 45,
	0, 0, 0, 91, 94, 83, 84, 0, 87, 88,
	95, 93, 89, 284, 90, 92, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 283, 86, 85, 0, 0,
	0, 0, 0, 91, 94, 83, 84, 0, 87, 88,
	95, 93, 89, 281, 90, 92, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 280, 86, 85, 0, 0,
	0, 0, 0, 91, 94, 83, 84, 0, 87, 88,
	95, 93, 89, 274, 90, 92, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 273, 86, 85, 0, 0,
	0, 0, 0, 91, 94, 83, 84, 0, 87, 88,
	95, 93, 89, 0, 90, 92, 82, 0, 0, 0,
	0, 9, 234, 0, 0, 0, 86, 85, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	316, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	315, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	314, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	313, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	310, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	309, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	306, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	300, 90, 92, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 0, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	0, 90, 92, 82, 0, 0, 0, 0, 9, 0,
	0, 0, 0, 86, 85, 0, 0, 91, 94, 83,
	84, 0, 87, 88, 95, 93, 89, 0, 90, 92,
	82, 0, 0, 0, 0, 0, 236, 0, 221, 0,
	86, 85, 0, 0, 91, 94, 83, 84, 0, 87,
	88, 95, 93, 89, 0, 90, 92, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 85, 0,
	0, 91, 94, 83, 84, 0, 87, 88, 95, 93,
	89, 0, 90, 92, 82, 0, 0, 0, 0, 0,
	219, 0, 175, 0, 86, 85, 0, 0, 91, 94,
	83, 84, 0, 87, 88, 95, 93, 89, 0, 90,
	92, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 85, 0, 0, 91, 94, 83, 84, 124,
	87, 88, 95, 93, 89, 0, 90, 92, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 85,
	0, 0, 91, 94, 83, 84, 0, 87, 88, 95,
	93, 89, 0, 90, 92, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 85, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 0,
	90, 92, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 91, 94, 83, 84,
	0, 87, 88, 95, 93, 89, 0, 90, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
}

var yyPact = [...]int16{
	4, 106, 511, -1000, -1000, -1000, 433, 569, 21, -1000,
	29, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -55,
	1357, -1000, -1000, 1286, 9, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 108, -1000, 104, -1000, 85, 1397, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 90, -12, 71, -1000,
	-12, 1397, 1397, 1397, -1000, -1000, 99, 81, -1000, -1000,
	-12, -1000, -1000, 21, 14, -1000, -1000, -1000, -1000, 76,
	-1000, 1397, 76, 149, 1338, 1286, -1000, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, 163, -12,
	163, -12, -12, 163, 1965, -1000, -12, -1000, 1259, -11,
	70, -12, 1397, -1000, -1000, -1000, -12, -12, 1226, 14,
	-1000, -1000, -1000, -1000, -12, 1965, -1000, 1194, 1938, 1416,
	1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
	1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
	1397, 80, 78, 1397, 80, 78, 1162, 1130, 80, 78,
	-1000, 1098, -1000, 1992, -1000, 1065, 1830, 1033, 1397, -1000,
	1911, 354, -1000, 1884, 1416, 1416, 76, -1000, -1000, -12,
	1992, 1992, 1992, 1992, 1992, 344, -25, -25, 2019, -8,
	-25, -25, -25, -25, -17, -17, -1000, -1000, -1000, 1992,
	117, 1992, -12, 1830, 18, -1000, -1000, 1992, 114, 1563,
	-12, -1000, 1992, -1000, 1857, 42, 22, -12, 1830, -12,
	48, 1416, 76, -1000, 76, -1000, -1000, 354, 1397, 31,
	39, -12, -12, 30, -12, 705, -12, -1000, -12, 651,
	27, 1397, -1000, 76, -1000, -1000, -1000, 599, 1830, -1000,
	-1000, 1001, 1397, -1000, 175, 1536, -12, -1000, 1397, 67,
	1506, -12, -1000, -1000, 1992, -1000, -1000, 1992, -1000, 1992,
	1476, -12, -1000, -12, -1000, 969, 1992, 1446, -12, -1000,
	-12, -1000, 936, -12, -1000, 903, 870, 1803, -1000, -12,
	-1000, 837, 804, 1773, -1000, 771, 1743, -1000, 1713, -1000,
	-1000, 738, 1683, -1000, 1653, -1000, -1000, 1623, -1000, -1000,
	-1000, 1593, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 177, 50, 200, 223, 222, 221, 220, 219, 9,
	163, 22, 218, 217, 215, 214, 213, 211, 4, 2,
	210, 209, 208, 206, 205, 1, 199, 193, 191, 89,
	0, 190, 184, 181, 179, 178, 26, 175, 174, 5,
	165, 164, 230,
}

var yyR1 = [...]int8{
	0, 39, 39, 39, 39, 40, 40, 40, 38, 38,
	38, 38, 38, 3, 3, 3, 4, 4, 4, 10,
	10, 10, 10, 10, 10, 10, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 37, 41,
	41, 42, 42, 9, 9, 11, 11, 11, 11, 11,
	11, 29, 15, 14, 12, 13, 13, 13, 13, 13,
	13, 13, 13, 36, 36, 16, 16, 5, 7, 7,
	6, 1, 1, 2, 17, 17, 17, 8, 8, 8,
	8, 18, 20, 20, 20, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 23, 23, 23, 23, 23,
	24, 25, 25, 25, 26, 26, 26, 26, 26, 26,
	28, 28, 28, 28, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 33, 33,
	33, 34, 34, 34, 31, 31, 31, 32, 32, 19,
	19, 35, 35, 35, 35, 35, 35, 35,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 2, 2, 2, 2,
	3, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 1, 1, 3, 7, 6, 6, 5, 6,
	5, 5, 4, 1, 1, 1, 3, 3, 1, 2,
	3, 1, 4, 3, 6, 7, 4, 4, 4, 1,
	1, 4, 2, 2, 2, 1, 1, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	5, 6, 6, 6, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 11, 10, 10, 9, 10, 9,
	9, 8, 8, 7, 7, 6, 11, 10, 10, 9,
	10, 9, 9, 8, 8, 7, 7, 6, 2, 4,
	3, 3, 4, 2, 3, 4, 1, 6, 7, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -38, 69, 2, 8, -3, -41, -4, -10, 28,
	-40, -16, -12, -13, -14, -15, -37, -11, 4, -7,
	22, 26, 25, -30, -9, -5, -35, -33, -31, -24,
	-17, -20, -21, -26, -27, -25, -29, -19, 64, 11,
	57, 58, 19, 21, 62, 63, -34, 13, -32, -2,
	12, 37, 49, 41, -22, -23, -28, 7, 10, 20,
	14, -3, 28, -10, -39, 4, 28, 28, 4, 66,
	-6, 65, -29, -36, 4, -30, -11, 50, 51, 53,
	52, 54, 23, 39, 40, 61, 60, 42, 43, 46,
	48, 37, 49, 45, 38, 44, 5, 47, 7, 13,
	7, 12, 13, 7, -30, 17, 5, 28, -42, -41,
	-42, 5, -42, -30, -30, -30, 13, 13, -42, -39,
	4, 28, -1, -2, 14, -30, -1, 4, -30, 4,
	-42, -42, -42, -42, -42, -42, -42, -42, -42, -42,
	-42, -42, -42, -42, -42, -42, -42, -42, -42, -42,
	-42, -25, -19, -42, -25, -19, -42, -42, -25, -19,
	-1, -42, 17, -30, 15, -42, -30, -42, -42, 15,
	-30, -42, -1, -30, 4, 4, -36, -1, -2, 14,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-9, -30, 13, -30, -8, 16, -18, -30, -19, -30,
	29, 17, -30, 15, -30, -42, -30, 29, -30, 29,
	-3, 4, -36, -1, -36, -1, -1, -42, -42, -42,
	-42, 5, 47, -42, 29, -42, 29, 16, 29, -42,
	-42, -42, 15, -36, -1, -1, -1, -30, -30, 17,
	16, -42, -42, 17, -42, -30, 29, 17, -42, -42,
	-30, 29, 17, 17, -30, -1, 16, -30, -18, -30,
	-30, 29, 17, 29, 17, -42, -30, -30, 29, 17,
	29, 17, -42, 29, 17, -42, -42, -30, 17, 29,
	17, -42, -42, -30, 17, -42, -30, 17, -30, 17,
	17, -42, -30, 17, -30, 17, 17, -30, 17, 17,
	17, -30, 17, 17, 17, 17, 17,
}

var yyDef = [...]int16{
	0, -2, 0, 12, 11, 8, 9, 14, 15, 39,
	17, 19, 20, 21, 22, 23, 24, 25, 5, 65,
	0, 53, 52, -2, 0, 68, -2, -2, 28, 29,
	-2, 31, 32, 33, -2, 35, 36, 37, 0, 151,
	152, 153, 154, 155, 156, 157, 0, 42, 42, 146,
	42, 0, 0, 0, 85, 86, 0, 0, 149, 150,
	42, 10, 40, 13, 16, 1, 2, 6, 7, 0,
	69, 0, 36, 0, 0, -2, 64, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 0, 42,
	0, 42, 42, 0, 0, 138, 42, 143, 0, 41,
	0, 42, 0, 82, 83, 84, 42, 42, 0, 18,
	3, 4, 66, 71, 42, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 0, 106, 107, 0, 0, 104, 105,
	67, 0, 140, 141, 144, 0, 42, 0, 0, 73,
	0, 0, 70, 0, 0, 0, 0, 62, -2, 42,
	46, 47, 48, 49, 50, 51, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 44,
	45, 43, 42, 42, 42, 76, 79, 80, 37, 42,
	42, 139, 142, 145, 0, 0, 0, 42, 42, 42,
	0, 0, 0, 60, 0, 58, 61, 0, 0, 0,
	0, 42, 42, 0, 42, 0, 42, 100, 42, 0,
	0, 0, 72, 0, 56, 59, 57, -2, 42, 103,
	74, 0, 0, 101, 0, 0, 42, 125, 0, 0,
	0, 42, 137, 102, 147, 55, 75, 77, 78, 81,
	0, 42, 124, 42, 123, 0, 148, 0, 42, 136,
	42, 135, 0, 42, 122, 0, 0, 0, 121, 42,
	134, 0, 0, 0, 133, 0, 0, 117, 0, 119,
	120, 0, 0, 129, 0, 131, 132, 0, 115, 116,
	118, 0, 127, 128, 130, 114, 126,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:142
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:146
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:150
		{
			yylex.(*parser).parseResult = yyDollar[3].aststmts
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:155
		{
			yylex.(*parser).unexpected("", "")
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:162
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:169
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:175
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:179
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:183
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:227
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:231
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[4].node)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:236
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].nodes, yyDollar[4].nodes, yyDollar[2].item)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:240
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]*ast.Node{yyDollar[1].node}, []*ast.Node{yyDollar[4].node}, yyDollar[2].item)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:245
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]*ast.Node{yyDollar[1].node}, []*ast.Node{yyDollar[4].node}, yyDollar[2].item)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:250
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]*ast.Node{yyDollar[1].node}, []*ast.Node{yyDollar[4].node}, yyDollar[2].item)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:255
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]*ast.Node{yyDollar[1].node}, []*ast.Node{yyDollar[4].node}, yyDollar[2].item)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:260
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]*ast.Node{yyDollar[1].node}, []*ast.Node{yyDollar[4].node}, yyDollar[2].item)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:268
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:273
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:279
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:290
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[3].astblock, yyDollar[1].item)
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:306
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:310
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:314
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:318
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:322
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:326
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:330
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:339
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:343
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:349
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:355
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:359
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:365
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:373
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].aststmts, yyDollar[4].item)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:379
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, ast.Stmts{}, yyDollar[3].item)
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:385
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[4].nodes, yyDollar[2].item, yyDollar[6].item)
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:389
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[4].nodes, yyDollar[2].item, yyDollar[7].item)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:393
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:400
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[4].node)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:404
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[4].node)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:408
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:412
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:418
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]*ast.Node{yyDollar[1].node}, []*ast.Node{yyDollar[4].node}, yyDollar[2].item)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:425
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:429
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:433
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:445
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:453
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:457
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:461
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:465
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:469
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:476
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:480
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:484
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:488
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:492
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:499
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[5].item)
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:506
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:511
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:515
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:524
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:528
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:532
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:536
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:540
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:544
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:551
		{
			yyVAL.node = yyDollar[1].node
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:555
		{
			yyVAL.node = yyDollar[1].node
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:559
		{
			yyVAL.node = yyDollar[1].node
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:563
		{
			yyVAL.node = yyDollar[1].node
		}
	case 114:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:569
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, yyDollar[10].node, true, yyDollar[2].item, yyDollar[11].item)
		}
	case 115:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:573
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 116:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:577
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 117:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:581
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 118:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:585
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 119:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:589
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 120:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:593
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, yyDollar[8].node, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 121:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, true, yyDollar[2].item, yyDollar[8].item)
		}
	case 122:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:601
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, false, yyDollar[2].item, yyDollar[8].item)
		}
	case 123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:605
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 124:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:609
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:613
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, false, yyDollar[2].item, yyDollar[6].item)
		}
	case 126:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:617
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, yyDollar[10].node, true, yyDollar[2].item, yyDollar[11].item)
		}
	case 127:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:621
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:625
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 129:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:629
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 130:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:633
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 131:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:637
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 132:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:641
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, yyDollar[8].node, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 133:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:645
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, true, yyDollar[2].item, yyDollar[8].item)
		}
	case 134:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:649
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, false, yyDollar[2].item, yyDollar[8].item)
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:653
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:657
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:661
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, false, yyDollar[2].item, yyDollar[6].item)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:667
		{
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:671
		{
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[4].item.Pos)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:675
		{
			yyVAL.node = yylex.(*parser).newListLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:682
		{
			yyVAL.node = yylex.(*parser).newListLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListLiteralAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:687
		{
			yyVAL.node = yylex.(*parser).newListLiteralAppendExpr(yyVAL.node, yyDollar[4].node)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:695
		{
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:699
		{
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[4].item.Pos)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:703
		{
			yyVAL.node = yylex.(*parser).newMapLiteralStart(yyDollar[1].astblock.LBracePos.Pos)
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:710
		{
			yyVAL.node = yylex.(*parser).newMapLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newMapLiteralAppendExpr(yyVAL.node, yyDollar[3].node, yyDollar[6].node)
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:715
		{
			yyVAL.node = yylex.(*parser).newMapLiteralAppendExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:722
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:726
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:733
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:737
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:741
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:745
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:750
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:755
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:759
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
