// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	ifitem *ast.IfStmtElem
	iflist []*ast.IfStmtElem
	node   *ast.Node
	nodes  []*ast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const operatorsStart = 57378
const ADD = 57379
const DIV = 57380
const GTE = 57381
const GT = 57382
const NOT = 57383
const LT = 57384
const LTE = 57385
const MOD = 57386
const MUL = 57387
const NEQ = 57388
const EQ = 57389
const EQEQ = 57390
const SUB = 57391
const ADD_EQ = 57392
const SUB_EQ = 57393
const DIV_EQ = 57394
const MUL_EQ = 57395
const MOD_EQ = 57396
const operatorsEnd = 57397
const keywordsStart = 57398
const TRUE = 57399
const FALSE = 57400
const IDENTIFIER = 57401
const AND = 57402
const OR = 57403
const NIL = 57404
const NULL = 57405
const IF = 57406
const ELIF = 57407
const ELSE = 57408
const keywordsEnd = 57409
const startSymbolsStart = 57410
const START_STMTS = 57411
const startSymbolsEnd = 57412
const UMINUS = 57413

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"NOT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:743

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	13, 108,
	-2, 26,
	-1, 26,
	13, 109,
	-2, 27,
	-1, 33,
	13, 110,
	-2, 34,
	-1, 175,
	1, 69,
	4, 69,
	8, 69,
	15, 69,
	28, 69,
	-2, 143,
}

const yyPrivate = 57344

const yyLast = 2196

var yyAct = [...]int16{
	74, 34, 36, 23, 201, 3, 9, 23, 23, 118,
	18, 70, 68, 56, 63, 61, 57, 38, 49, 46,
	59, 166, 91, 94, 64, 41, 58, 42, 20, 95,
	93, 22, 21, 119, 92, 101, 17, 104, 102, 94,
	99, 100, 72, 50, 226, 95, 93, 52, 65, 103,
	109, 111, 112, 113, 67, 51, 245, 75, 258, 232,
	105, 248, 35, 39, 40, 82, 244, 9, 43, 44,
	37, 123, 2, 9, 126, 227, 237, 117, 66, 91,
	94, 83, 84, 71, 87, 88, 95, 93, 89, 161,
	90, 92, 56, 122, 197, 57, 97, 115, 148, 149,
	151, 152, 228, 155, 156, 58, 98, 160, 114, 4,
	96, 163, 97, 91, 94, 83, 84, 167, 87, 88,
	95, 93, 89, 125, 90, 92, 170, 10, 1, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 106,
	108, 198, 110, 8, 202, 204, 203, 107, 16, 207,
	6, 62, 116, 209, 75, 211, 213, 101, 25, 23,
	173, 48, 99, 100, 45, 26, 47, 27, 55, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 33,
	150, 32, 153, 154, 28, 54, 53, 158, 75, 75,
	31, 120, 162, 215, 217, 219, 5, 164, 165, 30,
	60, 29, 11, 242, 243, 168, 15, 14, 13, 12,
	199, 250, 19, 69, 24, 255, 7, 259, 0, 0,
	121, 0, 0, 121, 0, 0, 0, 262, 264, 203,
	265, 263, 0, 75, 271, 272, 0, 0, 0, 238,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 282, 0, 0, 121, 0, 0, 0, 288, 222,
	0, 291, 293, 124, 0, 0, 0, 297, 299, 0,
	0, 302, 0, 0, 0, 121, 0, 306, 0, 175,
	223, 224, 225, 0, 0, 0, 0, 0, 230, 0,
	0, 0, 0, 0, 157, 234, 235, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	247, 0, 249, 0, 253, 169, 254, 0, 0, 174,
	0, 0, 0, 175, 175, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 281, 0, 0, 0, 0, 286, 0, 287, 0,
	0, 290, 0, 218, 220, 221, 0, 296, 175, 121,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 18,
	0, 0, 56, 0, 0, 57, 38, 49, 46, 59,
	121, 0, 0, 0, 41, 58, 42, 20, 0, 0,
	22, 21, 0, 61, 0, 0, 0, 0, 239, 240,
	0, 241, 50, 0, 0, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 0,
	260, 0, 39, 40, 0, 0, 0, 43, 44, 37,
	18, 0, 0, 56, 0, 0, 57, 38, 49, 46,
	59, 0, 0, 0, 0, 41, 58, 42, 20, 0,
	0, 22, 21, 0, 9, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 0, 0, 43, 44,
	37, 56, 0, 0, 57, 38, 49, 46, 59, 0,
	0, 0, 0, 41, 58, 42, 20, 0, 0, 22,
	21, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 82, 0, 0,
	0, 39, 40, 214, 0, 0, 43, 44, 37, 0,
	0, 91, 94, 83, 84, 0, 87, 88, 95, 93,
	89, 76, 90, 92, 77, 78, 80, 79, 81, 0,
	0, 0, 0, 56, 86, 85, 57, 38, 49, 46,
	59, 0, 0, 274, 0, 41, 58, 42, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 0, 56, 43, 44,
	57, 38, 49, 46, 59, 0, 0, 267, 0, 41,
	58, 42, 0, 0, 0, 0, 0, 0, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 39, 40, 0,
	0, 56, 43, 44, 57, 38, 49, 46, 59, 0,
	0, 257, 0, 41, 58, 42, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 39, 40, 0, 0, 56, 43, 44, 57, 38,
	49, 46, 59, 0, 0, 252, 0, 41, 58, 42,
	0, 0, 0, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 51, 82, 0,
	0, 0, 0, 0, 0, 39, 40, 0, 0, 0,
	43, 44, 91, 94, 83, 84, 0, 87, 88, 95,
	93, 89, 76, 90, 92, 77, 78, 80, 79, 81,
	0, 0, 0, 0, 56, 86, 85, 57, 38, 49,
	46, 59, 0, 0, 307, 0, 41, 58, 42, 56,
	0, 0, 57, 38, 49, 46, 59, 0, 0, 303,
	0, 41, 58, 42, 50, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 50,
	0, 0, 0, 52, 39, 40, 0, 0, 0, 43,
	44, 51, 0, 0, 0, 0, 0, 0, 0, 39,
	40, 0, 0, 56, 43, 44, 57, 38, 49, 46,
	59, 0, 0, 300, 0, 41, 58, 42, 56, 0,
	0, 57, 38, 49, 46, 59, 0, 0, 298, 0,
	41, 58, 42, 50, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 50, 0,
	0, 0, 52, 39, 40, 0, 0, 0, 43, 44,
	51, 0, 0, 0, 0, 0, 0, 0, 39, 40,
	0, 0, 56, 43, 44, 57, 38, 49, 46, 59,
	0, 0, 294, 0, 41, 58, 42, 56, 0, 0,
	57, 38, 49, 46, 59, 0, 0, 292, 0, 41,
	58, 42, 50, 0, 0, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 50, 0, 0,
	0, 52, 39, 40, 0, 0, 0, 43, 44, 51,
	0, 0, 0, 0, 0, 0, 0, 39, 40, 0,
	0, 56, 43, 44, 57, 38, 49, 46, 59, 0,
	0, 289, 0, 41, 58, 42, 56, 0, 0, 57,
	38, 49, 46, 59, 0, 0, 283, 0, 41, 58,
	42, 50, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 50, 0, 0, 0,
	52, 39, 40, 0, 0, 0, 43, 44, 51, 0,
	0, 0, 0, 0, 0, 0, 39, 40, 0, 0,
	56, 43, 44, 57, 38, 49, 46, 59, 0, 261,
	0, 0, 41, 58, 42, 56, 0, 0, 57, 38,
	49, 46, 59, 0, 0, 0, 0, 41, 58, 42,
	50, 0, 0, 0, 52, 0, 0, 212, 0, 0,
	0, 0, 51, 0, 0, 50, 0, 0, 0, 52,
	39, 40, 0, 0, 0, 43, 44, 51, 0, 0,
	0, 0, 0, 0, 0, 39, 40, 0, 0, 56,
	43, 44, 57, 38, 49, 46, 59, 208, 0, 0,
	0, 41, 58, 42, 56, 0, 0, 57, 38, 49,
	46, 59, 0, 0, 206, 0, 41, 58, 42, 50,
	0, 0, 0, 52, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 50, 0, 0, 0, 52, 39,
	40, 0, 0, 0, 43, 44, 51, 0, 0, 0,
	0, 0, 0, 0, 39, 40, 0, 0, 56, 43,
	44, 57, 38, 49, 46, 59, 0, 0, 0, 0,
	41, 58, 42, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	56, 0, 52, 57, 38, 49, 46, 59, 0, 200,
	51, 0, 41, 58, 42, 0, 0, 0, 39, 40,
	0, 0, 0, 43, 44, 0, 0, 0, 0, 171,
	50, 0, 56, 0, 52, 57, 38, 49, 46, 59,
	0, 0, 51, 0, 41, 58, 42, 0, 0, 0,
	39, 40, 0, 0, 0, 43, 44, 0, 0, 0,
	0, 0, 50, 0, 56, 0, 52, 57, 38, 49,
	46, 59, 166, 0, 51, 0, 41, 58, 42, 0,
	0, 0, 39, 40, 0, 0, 0, 43, 44, 0,
	0, 0, 0, 0, 50, 0, 0, 56, 52, 0,
	57, 38, 49, 46, 59, 0, 51, 159, 0, 41,
	58, 42, 0, 0, 39, 40, 0, 0, 0, 43,
	44, 0, 0, 0, 0, 0, 127, 50, 0, 56,
	0, 52, 57, 38, 49, 46, 59, 0, 0, 51,
	0, 41, 58, 42, 0, 0, 0, 39, 40, 0,
	0, 0, 43, 44, 0, 0, 0, 0, 73, 50,
	0, 56, 0, 52, 57, 38, 49, 46, 59, 0,
	0, 51, 0, 41, 58, 42, 0, 0, 0, 39,
	40, 0, 0, 0, 43, 44, 0, 0, 0, 0,
	0, 50, 0, 56, 0, 52, 57, 38, 49, 46,
	59, 0, 0, 51, 0, 41, 58, 42, 0, 0,
	0, 39, 40, 0, 0, 0, 43, 44, 0, 0,
	0, 0, 0, 50, 0, 56, 0, 52, 57, 38,
	49, 46, 176, 0, 0, 51, 0, 41, 58, 42,
	0, 0, 0, 39, 40, 0, 0, 0, 43, 44,
	0, 0, 0, 0, 0, 50, 0, 0, 0, 52,
	0, 0, 285, 0, 0, 0, 0, 51, 82, 0,
	0, 0, 0, 0, 284, 39, 40, 0, 0, 0,
	43, 44, 91, 94, 83, 84, 0, 87, 88, 95,
	93, 89, 279, 90, 92, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 278, 86, 85, 0, 0, 0,
	0, 0, 91, 94, 83, 84, 0, 87, 88, 95,
	93, 89, 276, 90, 92, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 275, 86, 85, 0, 0, 0,
	0, 0, 91, 94, 83, 84, 0, 87, 88, 95,
	93, 89, 269, 90, 92, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 268, 86, 85, 0, 0, 0,
	0, 0, 91, 94, 83, 84, 0, 87, 88, 95,
	93, 89, 0, 90, 92, 82, 0, 0, 0, 0,
	9, 229, 0, 0, 0, 86, 85, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 311,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 310,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 309,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 308,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 305,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 304,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 301,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 295,
	90, 92, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 86, 85, 0, 0, 0, 0, 0, 91,
	94, 83, 84, 0, 87, 88, 95, 93, 89, 0,
	90, 92, 82, 0, 0, 0, 0, 9, 0, 0,
	0, 0, 86, 85, 0, 0, 91, 94, 83, 84,
	0, 87, 88, 95, 93, 89, 0, 90, 92, 82,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 86,
	85, 0, 0, 91, 94, 83, 84, 0, 87, 88,
	95, 93, 89, 0, 90, 92, 82, 0, 0, 0,
	0, 0, 231, 0, 216, 0, 86, 85, 0, 0,
	91, 94, 83, 84, 0, 87, 88, 95, 93, 89,
	0, 90, 92, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 85, 0, 0, 91, 94, 83,
	84, 0, 87, 88, 95, 93, 89, 0, 90, 92,
	82, 0, 0, 0, 0, 0, 214, 0, 172, 0,
	86, 85, 0, 0, 91, 94, 83, 84, 0, 87,
	88, 95, 93, 89, 0, 90, 92, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 85, 0,
	0, 91, 94, 83, 84, 122, 87, 88, 95, 93,
	89, 0, 90, 92, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 85, 0, 0, 91, 94,
	83, 84, 0, 87, 88, 95, 93, 89, 0, 90,
	92, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 85, 0, 0, 91, 94, 83, 84, 0,
	87, 88, 95, 93, 89, 0, 90, 92, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 85,
	0, 0, 91, 94, 83, 84, 0, 87, 88, 95,
	93, 89, 0, 90, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86,
}

var yyPact = [...]int16{
	3, 101, 456, -1000, -1000, -1000, 395, 514, 20, -1000,
	50, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -54,
	1444, -1000, -1000, 785, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 103, -1000, 99, -1000, 160, 1476, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 32, -22, 45, -1000, -22,
	1476, 1476, 1476, -1000, -1000, 95, 84, -1000, -1000, -22,
	-1000, -1000, 20, 5, -1000, -1000, -1000, -1000, 79, -1000,
	1476, 79, 119, 1412, 785, -1000, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, 85, -22, 85, -22,
	-22, 85, 2081, -1000, -22, -1000, 1380, -13, 74, -22,
	1476, -1000, -1000, -1000, -22, -22, 1347, 5, -1000, -1000,
	-1000, -1000, -22, 2081, -1000, 1315, 2054, 1508, 1476, 1476,
	1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
	1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 83, 81,
	1476, 83, 81, 1283, 1251, 83, 81, -1000, 1197, -1000,
	2108, -1000, 1182, 1919, 1128, 1476, -1000, 2027, 6, -1000,
	2000, 1508, 1508, 79, -1000, -1000, -22, 2108, 2108, 2108,
	2108, 2108, 2108, 76, -15, -15, 2135, 42, -15, -15,
	-15, -15, 1, 1, -1000, -1000, -1000, -22, 1919, 39,
	-1000, -1000, 2108, 28, 1652, -22, -1000, 2108, -1000, 1973,
	43, 1946, -22, 1919, -22, 61, 1508, 79, -1000, 79,
	-1000, -1000, 6, 1476, 49, 40, -22, -22, 44, -22,
	758, -22, -1000, -22, 704, 41, 1476, -1000, 79, -1000,
	-1000, -1000, 544, 1919, -1000, -1000, 1113, 1476, -1000, 650,
	1625, -22, -1000, 1476, 596, 1595, -22, -1000, -1000, 2108,
	-1000, -1000, 2108, -1000, 2108, 1565, -22, -1000, -22, -1000,
	1059, 2108, 1535, -22, -1000, -22, -1000, 1044, -22, -1000,
	990, 975, 1892, -1000, -22, -1000, 921, 906, 1862, -1000,
	852, 1832, -1000, 1802, -1000, -1000, 837, 1772, -1000, 1742,
	-1000, -1000, 1712, -1000, -1000, -1000, 1682, -1000, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]uint8{
	0, 211, 171, 213, 236, 234, 233, 232, 230, 153,
	36, 229, 228, 227, 226, 222, 221, 4, 2, 219,
	210, 206, 205, 204, 1, 201, 199, 178, 62, 0,
	177, 176, 175, 174, 168, 42, 158, 128, 14, 127,
	157, 102,
}

var yyR1 = [...]int8{
	0, 38, 38, 38, 38, 39, 39, 39, 37, 37,
	37, 37, 37, 3, 3, 3, 4, 4, 4, 9,
	9, 9, 9, 9, 9, 9, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 36, 40,
	40, 41, 41, 10, 10, 10, 10, 10, 10, 28,
	14, 13, 11, 12, 12, 12, 12, 12, 12, 12,
	12, 35, 35, 15, 15, 5, 7, 7, 6, 1,
	1, 2, 16, 16, 16, 8, 8, 8, 8, 17,
	19, 19, 19, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 22, 22, 22, 22, 22, 23, 24,
	24, 24, 25, 25, 25, 25, 25, 25, 27, 27,
	27, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 32, 32, 32, 33, 33,
	33, 30, 30, 30, 31, 31, 18, 18, 34, 34,
	34, 34, 34, 34, 34,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 2, 2, 2, 2,
	3, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 4, 4, 4, 4, 4, 4,
	1, 1, 3, 7, 6, 6, 5, 6, 5, 5,
	4, 1, 1, 1, 3, 3, 1, 2, 3, 1,
	4, 3, 6, 7, 4, 4, 4, 1, 1, 4,
	2, 2, 2, 1, 1, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 5, 6,
	6, 6, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 11, 10, 10, 9, 10, 9, 9, 8, 8,
	7, 7, 6, 11, 10, 10, 9, 10, 9, 9,
	8, 8, 7, 7, 6, 2, 4, 3, 3, 4,
	2, 3, 4, 1, 6, 7, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -37, 69, 2, 8, -3, -40, -4, -9, 28,
	-39, -15, -11, -12, -13, -14, -36, -10, 4, -7,
	22, 26, 25, -29, -5, -34, -32, -30, -23, -16,
	-19, -20, -25, -26, -24, -28, -18, 64, 11, 57,
	58, 19, 21, 62, 63, -33, 13, -31, -2, 12,
	37, 49, 41, -21, -22, -27, 7, 10, 20, 14,
	-3, 28, -9, -38, 4, 28, 28, 4, 66, -6,
	65, -28, -35, 4, -29, -10, 47, 50, 51, 53,
	52, 54, 23, 39, 40, 61, 60, 42, 43, 46,
	48, 37, 49, 45, 38, 44, 7, 13, 7, 12,
	13, 7, -29, 17, 5, 28, -41, -40, -41, 5,
	-41, -29, -29, -29, 13, 13, -41, -38, 4, 28,
	-1, -2, 14, -29, -1, 4, -29, 4, -41, -41,
	-41, -41, -41, -41, -41, -41, -41, -41, -41, -41,
	-41, -41, -41, -41, -41, -41, -41, -41, -24, -18,
	-41, -24, -18, -41, -41, -24, -18, -1, -41, 17,
	-29, 15, -41, -29, -41, -41, 15, -29, -41, -1,
	-29, 4, 4, -35, -1, -2, 14, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, 13, -29, -8,
	16, -17, -29, -18, -29, 29, 17, -29, 15, -29,
	-41, -29, 29, -29, 29, -3, 4, -35, -1, -35,
	-1, -1, -41, -41, -41, -41, 5, 47, -41, 29,
	-41, 29, 16, 29, -41, -41, -41, 15, -35, -1,
	-1, -1, -29, -29, 17, 16, -41, -41, 17, -41,
	-29, 29, 17, -41, -41, -29, 29, 17, 17, -29,
	-1, 16, -29, -17, -29, -29, 29, 17, 29, 17,
	-41, -29, -29, 29, 17, 29, 17, -41, 29, 17,
	-41, -41, -29, 17, 29, 17, -41, -41, -29, 17,
	-41, -29, 17, -29, 17, 17, -41, -29, 17, -29,
	17, 17, -29, 17, 17, 17, -29, 17, 17, 17,
	17, 17,
}

var yyDef = [...]int16{
	0, -2, 0, 12, 11, 8, 9, 14, 15, 39,
	17, 19, 20, 21, 22, 23, 24, 25, 5, 63,
	0, 51, 50, 38, 66, -2, -2, 28, 29, 30,
	31, 32, 33, -2, 35, 36, 37, 0, 148, 149,
	150, 151, 152, 153, 154, 0, 42, 42, 143, 42,
	0, 0, 0, 83, 84, 0, 0, 146, 147, 42,
	10, 40, 13, 16, 1, 2, 6, 7, 0, 67,
	0, 36, 0, 0, 61, 62, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 0, 42, 0, 42,
	42, 0, 0, 135, 42, 140, 0, 41, 0, 42,
	0, 80, 81, 82, 42, 42, 0, 18, 3, 4,
	64, 69, 42, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	0, 104, 105, 0, 0, 102, 103, 65, 0, 137,
	138, 141, 0, 42, 0, 0, 71, 0, 0, 68,
	0, 0, 0, 0, 60, -2, 42, 43, 44, 45,
	46, 47, 48, 49, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 42, 42, 42,
	74, 77, 78, 37, 42, 42, 136, 139, 142, 0,
	0, 0, 42, 42, 42, 0, 0, 0, 58, 0,
	56, 59, 0, 0, 0, 0, 42, 42, 0, 42,
	0, 42, 98, 42, 0, 0, 0, 70, 0, 54,
	57, 55, 38, 42, 101, 72, 0, 0, 99, 0,
	0, 42, 122, 0, 0, 0, 42, 134, 100, 144,
	53, 73, 75, 76, 79, 0, 42, 121, 42, 120,
	0, 145, 0, 42, 133, 42, 132, 0, 42, 119,
	0, 0, 0, 118, 42, 131, 0, 0, 0, 130,
	0, 0, 114, 0, 116, 117, 0, 0, 126, 0,
	128, 129, 0, 112, 113, 115, 0, 124, 125, 127,
	111, 123,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:141
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:145
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:149
		{
			yylex.(*parser).parseResult = yyDollar[3].aststmts
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:154
		{
			yylex.(*parser).unexpected("", "")
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:161
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:168
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:174
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:178
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:182
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:225
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:229
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:233
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:237
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:241
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:245
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:252
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:257
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:263
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:274
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[3].astblock, yyDollar[1].item)
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:286
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:290
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:294
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:298
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:306
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:310
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:314
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:323
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:327
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:333
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:339
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:343
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:349
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:357
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].aststmts, yyDollar[4].item)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:363
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, ast.Stmts{}, yyDollar[3].item)
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:369
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[4].nodes, yyDollar[2].item, yyDollar[6].item)
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:373
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[4].nodes, yyDollar[2].item, yyDollar[7].item)
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:377
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:384
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[4].node)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:388
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[4].node)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:392
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:396
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:402
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:408
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:412
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:416
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:424
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:428
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:432
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:436
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:440
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:444
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:448
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:452
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:459
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:463
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:467
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:471
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:475
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:482
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[5].item)
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:489
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:494
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:498
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:507
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:511
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:515
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:519
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:523
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:527
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:534
		{
			yyVAL.node = yyDollar[1].node
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:538
		{
			yyVAL.node = yyDollar[1].node
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:542
		{
			yyVAL.node = yyDollar[1].node
		}
	case 111:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:548
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, yyDollar[10].node, true, yyDollar[2].item, yyDollar[11].item)
		}
	case 112:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:552
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 113:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:556
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 114:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:560
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 115:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:564
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 116:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:568
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 117:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:572
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, yyDollar[8].node, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 118:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:576
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, true, yyDollar[2].item, yyDollar[8].item)
		}
	case 119:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:580
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, false, yyDollar[2].item, yyDollar[8].item)
		}
	case 120:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:584
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:588
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:592
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, false, yyDollar[2].item, yyDollar[6].item)
		}
	case 123:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:596
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, yyDollar[10].node, true, yyDollar[2].item, yyDollar[11].item)
		}
	case 124:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:600
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 125:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:604
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 126:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:608
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 127:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:612
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, yyDollar[9].node, true, yyDollar[2].item, yyDollar[10].item)
		}
	case 128:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:616
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 129:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:620
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, yyDollar[8].node, true, yyDollar[2].item, yyDollar[9].item)
		}
	case 130:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:624
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, true, yyDollar[2].item, yyDollar[8].item)
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:628
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node, nil, false, yyDollar[2].item, yyDollar[8].item)
		}
	case 132:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:632
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, yyDollar[6].node, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 133:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:636
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, yyDollar[4].node, nil, nil, false, yyDollar[2].item, yyDollar[7].item)
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:640
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[1].node, nil, nil, nil, false, yyDollar[2].item, yyDollar[6].item)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:646
		{
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:650
		{
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[4].item.Pos)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:654
		{
			yyVAL.node = yylex.(*parser).newListLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:661
		{
			yyVAL.node = yylex.(*parser).newListLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListLiteralAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:666
		{
			yyVAL.node = yylex.(*parser).newListLiteralAppendExpr(yyVAL.node, yyDollar[4].node)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:674
		{
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:678
		{
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[4].item.Pos)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:682
		{
			yyVAL.node = yylex.(*parser).newMapLiteralStart(yyDollar[1].astblock.LBracePos.Pos)
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:689
		{
			yyVAL.node = yylex.(*parser).newMapLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newMapLiteralAppendExpr(yyVAL.node, yyDollar[3].node, yyDollar[6].node)
		}
	case 145:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:694
		{
			yyVAL.node = yylex.(*parser).newMapLiteralAppendExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:701
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:705
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:712
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:716
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:720
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:724
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:729
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:734
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:738
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
